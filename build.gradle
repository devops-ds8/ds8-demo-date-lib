/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

    
plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'nebula.release' version '18.0.8'
}

group = 'net.devopsds8'
archivesBaseName = 'ds8-demo-date-lib'

repositories {
    mavenLocal()
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task showAllVersionTags(type: Exec) {
    commandLine 'sh', '-c', 'git for-each-ref --sort=-taggerdate --format \'%(refname:short)\' refs/tags | head -n 1'
    //git for-each-ref --sort=taggerdate --format '%(refname:short) %(taggerdate)' refs/tags
}


import java.nio.charset.StandardCharsets
def getLastVersionTag() {
    def stdout = new ByteArrayOutputStream()
    def exec = project.exec {
        standardOutput = stdout
        commandLine 'sh', '-c', 'git for-each-ref --sort=-taggerdate --format \'%(refname:short)\' refs/tags | head -n 1'
        // git for-each-ref --sort=-taggerdate --format '%(refname:short) %(taggerdate)' refs/tags | head -n 1
    }
    def tag = stdout.toString(StandardCharsets.UTF_8.name()).trim().replace("v","")
    println "$tag"
    return tag
}

publishing {

    def github_username = project.findProperty('github_username') ?: 'github_username not provided'
    def github_token = project.findProperty('github_token') ?: 'github_token not provided'

    def lastTag = getLastVersionTag()

    println "Will publish to github the version: $lastTag"
    
    publications {
        mavenJava(MavenPublication) {
            from components.java
             version = "$lastTag"
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/devops-ds8/ds8-demo-date-lib")
            credentials {
                username = github_username
                password = github_token
            }
        }
    }
}
